---
title: "Variant thresholds"
date: "`r Sys.Date()`"
author: "J. Boom"
format:
    html:
        toc: true
        self-contained: true
        toc-title: Table of contents - Variant thresholds
        toc-location: left
execute:
    echo: true
---

# Load packages
```{r}
#| warning: false
library("tidyverse")
library("knitr")
library("readr")
library("readxl")
library("dplyr")
library("broom")
library("tidyr")
library("naniar")
library("factoextra")
library("FactoMineR")
library("PCAtools")
library("ggplot2")
```

# Run document setup
```{r}
#| warning: false

knitr::opts_chunk$set(echo=TRUE, message=FALSE)
knitr::opts_chunk$set(fig.width=9,
                      fig.height=9,
                      out.width="85%",
                      fig.align="center")
theme_set(theme_bw())
```

# Load data:
```{r}
#| label: tbl-data
#| tbl-cap: _The first 8 rows of the data file._
#| warning: false

# Install tidyverse:
# https://medium.com/@jamie84mclaughlin/installing-r-and-the-tidyverse-on-ubuntu-20-04-60170020649b

# Read in the tsv file in the data folder.
data <- read_tsv("../data/benchmark-vcf/benchmark.annotated.tab",
                 col_names=TRUE,
                 skip=67)

# Display the first 8 lines of the data file.
head(data, n=8) |>
    knitr::kable(format="html") |>
    kableExtra::kable_classic(full_width=FALSE)
```

# Inspect & select data
```{r}
#| label: tbl-data
#| tbl-cap: _The first 8 rows of the most important numeric annotations._
#| warning: false

# Condense rows to one per variation id.
data_dedup <- data[!duplicated(data$`#Uploaded_variation`), ] |>
    dplyr::rename("Variation_id" = 1)
# Select just the important numeric annotation sources.
# SIFT and PolyPhen were removed because they had not a single value.
annotation_columns <- c("Variation_id", "AF", "MAX_AF", "am_pathogenicity",
                        "CADD_PHRED", "CADD_RAW", "CAPICE_SCORE",
                        "FATHMM_MKL_C", "FATHMM_MKL_NC")
# Select just the annotation columns, replace dash with NA and make sure the
# values are numeric.
data_select <- data_dedup[,annotation_columns] |>
    replace_with_na_all(condition = ~.x == "-") |>
    mutate_at(annotation_columns[-1], function(x) as.numeric(as.character(x)))

# Remove more annotation sources due to high amount of missing values, also
# remove rows of remaining columns with missing values.
data_nomissing <- data_select |>
    dplyr::select("Variation_id", "CADD_PHRED", "CADD_RAW", "CAPICE_SCORE",
           "FATHMM_MKL_C", "FATHMM_MKL_NC") |>
    drop_na() |>
    tibble::column_to_rownames(var="Variation_id")

# Display the first 8 lines of the data.
head(data_nomissing, n=8) |>
    knitr::kable(format="html") |>
    kableExtra::kable_classic(full_width=FALSE)
```

# Run PCAtools
```{r}
#| warning: false

# Perform a principal component analysis, include centering and scaling of data.
pca_data <- pca(data_nomissing,
                center=TRUE,
                scale=TRUE,
                )

# Perform horn's parallel analysis.
# A method that determines how many components to keep.
# It compares calculated eigenvalues to that from a Monte-Carlo simulated
# data matrix of random data of the same size.
pca_horn <- parallelPCA(data_nomissing)

# Perform the elbow method.
# By plotting the explained variation and determining the elbow of the line
# you can determine where the line starts leveling out.
pca_elbow <- findElbowPoint(pca_data$variance)

# Show the explained variance in each component.
screeplot(pca_data,
          components = getComponents(pca_data, 1:20),
          vline = c(pca_horn$n, pca_elbow)) +
    geom_text(aes(pca_horn$n, 50, label = "Horn's", vjust = -1)) +
    geom_text(aes(pca_elbow, 50, label = "Elbow", vjust = -1))

# Output a biplot.
biplot(pca_data,
       labSize=5,
       pointSize=5,
       sizeLoadingsName=5,
       legendPosition="right",
       title="Biplot")
```

# Run PCA()
```{r}
#| warning: false

# http://www.sthda.com/english/wiki/factoextra-r-package-easy-multivariate-data-analyses-and-elegant-visualization
# Perform a principal component analysis, include centering and scaling of data.
pca.data <- PCA(data_nomissing,
                graph=FALSE,
                ncp=4,
                scale.unit=TRUE)

# Visualize eigenvalues/variances.
fviz_screeplot(pca.data,
               addlabels=TRUE)

# Extract the results for variables.
pca.var <- get_pca_var(pca.data)
head(pca.var$contrib)

# Control variable colors using their contributions
fviz_pca_var(pca.data,
             col.var="contrib",
             gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
             repel = TRUE # Avoid text overlapping
             )

# Contributions of variables to PC1
fviz_contrib(pca.data, choice = "var", axes = 1, top = 10)
# Contributions of variables to PC2
fviz_contrib(pca.data, choice = "var", axes = 2, top = 10)
```

# Output session information
```{r}
sessionInfo()
```