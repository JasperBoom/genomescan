---
title: "Investigate ClinVar test set"
date: "`r Sys.Date()`"
author: "J. Boom"
format:
    html:
        toc: true
        self-contained: true
        toc-title: Table of contents - Investigate ClinVar test set
        toc-location: left
execute:
    echo: true
---

# Load packages
```{r}
#| warning: false

library("tidyverse")
library("knitr")
library("readxl")
library("broom")
library("naniar")
library("factoextra")
library("FactoMineR")
library("plotROC")
library("data.table")
library("Rtsne")
```

# Run document setup
```{r}
#| warning: false

# Set a seed for reproducability.
set.seed(1995)

# Set other formatting settings ofr Quarto document.
knitr::opts_chunk$set(echo=TRUE,
                      message=FALSE,
                      fig.width=9,
                      fig.height=9,
                      out.width="85%",
                      fig.align="center")

theme_set(theme_bw())
```

# ClinVar and GIAB projects
## Load data from the python script
```{r}
#| label: tbl-data
#| tbl-cap: _The first 8 rows of the data file._
#| warning: false

# Read in the tsv file in the data folder, the original test set based on
# ClinVar and GIAB.
giab <- read_tsv("/home/j.boom/develop/genomescan/data/benchmark-vcf/2024-02-05/benchmark.annotated.tab",
                 col_names=TRUE,
                 skip=57,
                 show_col_types = FALSE)

# Display the first 8 lines of the data file.
head(giab, n=8) |>
    knitr::kable(format="html") |>
    kableExtra::kable_classic(full_width=FALSE)
```

## Inspect & select data from ClinVar & GIAB data
```{r}
#| label: tbl-data
#| tbl-cap: _The first 8 rows of the most important numeric annotations._
#| warning: false

# Condense rows to one per variation id, vep reports all transcripts it can
# find by default.
giab.dedup <- giab[!duplicated(giab$`Uploaded_variation`), ] |>
    dplyr::rename("Variation_id" = 1)

# Select just the important numeric annotation sources. Replace dash with NA
# and make sure the values are numeric.
giab.select <- giab.dedup[, c("Variation_id",
                              "CADD_PHRED",
                              "CADD_RAW",
                              "CAPICE_SCORE",
                              "FATHMM_MKL_C",
                              "FATHMM_MKL_NC",
                              "ClinVar_CLNSIG")] |>
    replace_with_na_all(condition = ~.x == "-") |>
    mutate_at(c("CADD_PHRED",
                "CADD_RAW",
                "CAPICE_SCORE",
                "FATHMM_MKL_C",
                "FATHMM_MKL_NC"),
              function(x) as.numeric(as.character(x)))

# Remove rows of columns with missing values, set the category to a factor and
# set the variant identifiers as rownames.
giab.nomissing <- giab.select |>
    drop_na() |>
    dplyr::mutate_at(c("ClinVar_CLNSIG"),
                     as.factor) |>
    tibble::column_to_rownames(var="Variation_id")

# Display the first 8 lines of the data.
head(giab.nomissing,
     n=8) |>
    knitr::kable(format="html") |>
    kableExtra::kable_classic(full_width=FALSE)
```

## Run PCA for ClinVar & GIAB data
```{r}
#| warning: false

# http://www.sthda.com/english/wiki/factoextra-r-package-easy-multivariate-data-analyses-and-elegant-visualization
# Perform a principal component analysis, include centering and scaling of data.
# Using the PCA command.
giab.pca.data <- PCA(giab.nomissing[,1:5],
                     graph=FALSE,
                     ncp=4,
                     scale.unit=TRUE)

# Extract the results for variables.
giab.pca.var <- get_pca_var(giab.pca.data)

# Contributions of variables to PC1.
giab.pc1.contribs <- fviz_contrib(giab.pca.data,
                                  choice="var",
                                  axes=1,
                                  top=10)

# Contributions of variables to PC2.
giab.pc2.contribs <- fviz_contrib(giab.pca.data,
                                  choice="var",
                                  axes=2,
                                  top=10)

# Show the PCA biplot.
fviz_pca_ind(giab.pca.data,
             label="none",
             habillage=giab.nomissing$ClinVar_CLNSIG)
```

## Run prcomp for ClinVar & GIAB data
```{r}
#| warning: false

# https://plotly.com/ggplot2/pca-visualization/
# Perform a principal component analysis, include centering and scaling of data.
# Using the prcomp command.
giab.prcomp.data <- prcomp(giab.nomissing[,1:5],
                           center=TRUE,
                           scale.=TRUE)
```

## Create a scatterplot for ClinVar & GIAB data
```{r}
#| warning: false

# Prepare data from prcomp for ggplot scatterplot.
giab.pca.scatterplot.data <- cbind(giab.prcomp.data$x[,1:2],
                                   as.character(giab.nomissing[,6])) |>
    as_tibble() |>
    dplyr::rename(PC1="PC1",
                  PC2="PC2",
                  CONDITION="V3") |>
    dplyr::mutate_at(c("PC1"),
                     as.numeric) |>
    dplyr::mutate_at(c("PC2"),
                     as.numeric)

# Extract the variance explained by the first two components.
giab.pca.variance <- summary(giab.prcomp.data)$importance[2,]

# Create the scatterplot.
giab.pca.scatterplot <- ggplot(data=giab.pca.scatterplot.data,
                               aes(x=PC1,
                                   y=PC2,
                                   colour=CONDITION)) +
    geom_point(size=2) +
    theme(legend.position=c(0.95,0.75),
          legend.justification=c(1,0)) +
    scale_colour_manual(values=c("#83b96d",
                                 "#00a6cf"),
                        name="Clinical significance") +
    ggtitle("Projection of data on principal components one and two") +
    xlab(paste(paste("PC1 -",
                     format(round(giab.pca.variance["PC1"] * 100),
                            2,
                            nsmall=2),
                     sep=" "),
               "%",
               sep="")) +
    ylab(paste(paste("PC2 -",
                     format(round(giab.pca.variance["PC2"] * 100),
                            2,
                            nsmall=2),
                     sep=" "),
               "%",
               sep=""))

# Print the scatterplot.
giab.pca.scatterplot
```

## Create a barplot for ClinVar & GIAB data
```{r}
#| warning: false

# Prepare data from prcomp for ggplot barplot.
giab.pca.barplot.data <- cbind(giab.pc1.contribs$data[,c(1,2)],
                               giab.pc2.contribs$data[,2]) |>
    as_tibble() |>
    dplyr::rename(PC1="contrib",
                  PC2="giab.pc2.contribs$data[, 2]",
                  METHOD="name") |>
    dplyr::mutate_at(c("PC1"), as.numeric) |>
    dplyr::mutate_at(c("PC2"), as.numeric) |>
    pivot_longer(names_to="PCA",
                 values_to="CONTRIBUTION",
                 cols=c("PC1", "PC2")) |>
    dplyr::mutate(across(c("CONTRIBUTION"),
                         round,
                         2))

# Create the barplot.
giab.pca.barplot <- ggplot(data=giab.pca.barplot.data,
                           aes(x=METHOD,
                               y=CONTRIBUTION,
                               fill=PCA,
                               colour=PCA)) +
    ylim(c(0,70)) +
    geom_bar(stat="identity",
             position=position_dodge()) +
    geom_text(aes(label=CONTRIBUTION),
              fontface="bold",
              vjust=-1,
              position=position_dodge(0.9),
              size=4,
              colour="black") +
    theme(legend.position=c(0.95,0.75),
          legend.justification=c(1,0)) +
    scale_colour_manual(values=c("#003670",
                                 "#ec9e62"),
                        name="Principal component") +
    scale_fill_manual(values=c("#003670",
                               "#ec9e62"),
                      name="Principal component") +
    ggtitle("Contribution of the different annotation sources to principal\
            components one and two") +
    xlab("Annotation source") +
    ylab("Contribution (%)")

# Print the barplot.
giab.pca.barplot
```

## Create a ROC plot for ClinVar & GIAB data
```{r}
#| warning: false

# https://cran.r-project.org/web/packages/plotROC/vignettes/examples.html
# Use ggplot and plotROC to create ROC plots for each annotation source.
giab.combined.roc.plots <- ggplot(melt_roc(giab.nomissing,
                                           "ClinVar_CLNSIG",
                                           c("CADD_PHRED",
                                             "CADD_RAW",
                                             "CAPICE_SCORE",
                                             "FATHMM_MKL_C",
                                             "FATHMM_MKL_NC")),
                                  aes(m=M,
                                      d=D,
                                      colour=name)) +
    geom_roc(n.cuts=5,
             labelsize=5,
             labelround=2,
             show.legend=TRUE,
             labels=FALSE) +
    xlim(-0.1, 1) +
    ylim(0, 1.1)

# Split the plots into 5 windows.
giab.combined.roc.plots +
    facet_wrap(~ name)

# Calculate the AUC of each ROC plot.
calc_auc(giab.combined.roc.plots) |>
    knitr::kable(format="html") |>
    kableExtra::kable_classic(full_width=FALSE)
```

# Create scatterplot using the annotation scores for ClinVar & GIAB data.
```{r}
# Create a scatterplot of purely the scores we got from CAPICE and FATHMM
# coding.
giab.scores.scatterplot <- ggplot(data=giab.nomissing,
                                  aes(x=CAPICE_SCORE,
                                      y=FATHMM_MKL_C,
                                      colour=ClinVar_CLNSIG)) +
    geom_point(size=2)

# Print the scatterplot.
giab.scores.scatterplot
```

# Create TSNE plot
```{r}
# https://plotly.com/ggplot2/pca-visualization/
# Create a TSNE object using the annotation columns, make sure to ignore
# duplicates, this has something to do with identical values generated by the
# PCA which is done under the hood.
giab.tsne <- Rtsne(as.matrix(giab.nomissing[,1:5]),
                   check_duplicates=FALSE)

# Extract the coordinates created by TSNE and add a column for colouring.
giab.tsne.plot <- data.frame(x=giab.tsne$Y[,1],
                             y=giab.tsne$Y[,2],
                             colour=giab.nomissing$ClinVar_CLNSIG)
```

```{r}
# Use ggplot to display the TSNE results.
ggplot(data=giab.tsne.plot,
       aes(x=x,
           y=y,
           colour=colour)) +
    geom_point(size=2)
```

# Output session information
```{r}
#| warning: false

# Print the session info including packages and version used.
sessionInfo()
```