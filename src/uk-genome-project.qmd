---
title: "Investigate UK samples"
date: "`r Sys.Date()`"
author: "J. Boom"
format:
    html:
        toc: true
        self-contained: true
        toc-title: Table of contents - Investigate UK samples
        toc-location: left
execute:
    echo: true
---

# Load packages
```{r}
#| warning: false

library("tidyverse")
library("knitr")
library("readxl")
library("broom")
library("naniar")
library("factoextra")
library("FactoMineR")
library("plotROC")
library("data.table")
library("Rtsne")
```

# Run document setup
```{r}
#| warning: false

# Set a seed for reproducability.
set.seed(1995)

# Set other formatting settings ofr Quarto document.
knitr::opts_chunk$set(echo=TRUE,
                      message=FALSE,
                      fig.width=9,
                      fig.height=9,
                      out.width="85%",
                      fig.align="center")

theme_set(theme_bw())
```

# UK Personal Genome project
## Load datasets for two people (FR07961003 & FR07961005)
```{r}
#| label: tbl-data
#| tbl-cap: _The first 8 rows of the data file._
#| warning: false

# Read in the tsv file in the data folder, based on the personal genome project.
# This is individual FR07961003.
FR07961003 <- read_tsv("/mnt/titan/users/j.boom/vcf/personalgenomesuk/FR07961003.pass.recode.annotated.edit.tab",
                       col_names=TRUE,
                       show_col_types = FALSE)

# This is individual FR07961005.
#FR07961005 <- read_tsv("/mnt/titan/users/j.boom/vcf/personalgenomesuk/FR07961005.pass.recode.annotated.edit.tab",
#                       col_names=TRUE,
#                       show_col_types = FALSE)

# Display the first 8 lines of the data file.
head(FR07961003, n=8) |>
    knitr::kable(format="html") |>
    kableExtra::kable_classic(full_width=FALSE)
```

## Inspect & select data for FR07961003
```{r}
#| label: tbl-data
#| tbl-cap: _The first 8 rows of the most important numeric annotations._
#| warning: false

# Condense rows to one per variation id, vep reports all transcripts it can
# find by default.
FR07961003.dedup <- FR07961003[!duplicated(FR07961003$`Uploaded_variation`), ] |>
    dplyr::rename("Variation_id" = 1)

# Select just the important numeric annotation sources. Replace dash with NA
# and make sure the values are numeric.
FR07961003.select <- FR07961003.dedup[, c("Variation_id",
                                          "CADD_PHRED",
                                          "CADD_RAW",
                                          "CAPICE_SCORE",
                                          "FATHMM_MKL_C",
                                          "FATHMM_MKL_NC",
                                          "ClinVar_CLNSIG")] |>
    replace_with_na_all(condition = ~.x == "-") |>
    mutate_at(c("CADD_PHRED",
                "CADD_RAW",
                "CAPICE_SCORE",
                "FATHMM_MKL_C",
                "FATHMM_MKL_NC"),
              function(x) as.numeric(as.character(x)))

# Remove rows of columns with missing values, set the category to a factor and
# set the variant identifiers as rownames.
FR07961003.nomissing <- FR07961003.select |>
    drop_na() |>
    dplyr::mutate_at(c("ClinVar_CLNSIG"),
                     as.factor) |>
    tibble::column_to_rownames(var="Variation_id")

# Display the first 8 lines of the data.
head(FR07961003.nomissing,
     n=8) |>
    knitr::kable(format="html") |>
    kableExtra::kable_classic(full_width=FALSE)
```

## Run PCA for FR07961003
```{r}
#| warning: false

# http://www.sthda.com/english/wiki/factoextra-r-package-easy-multivariate-data-analyses-and-elegant-visualization
# Perform a principal component analysis, include centering and scaling of data.
# Using the PCA command.
FR07961003.pca.data <- PCA(FR07961003.nomissing[,1:5],
                           graph=FALSE,
                           ncp=4,
                           scale.unit=TRUE)

# Extract the results for variables.
FR07961003.pca.var <- get_pca_var(FR07961003.pca.data)

# Contributions of variables to PC1.
FR07961003.pc1.contribs <- fviz_contrib(FR07961003.pca.data,
                                        choice="var",
                                        axes=1,
                                        top=10)

# Contributions of variables to PC2.
FR07961003.pc2.contribs <- fviz_contrib(FR07961003.pca.data,
                                        choice="var",
                                        axes=2,
                                        top=10)

# Show the PCA biplot.
fviz_pca_ind(FR07961003.pca.data,
             label="none",
             habillage=FR07961003.nomissing$ClinVar_CLNSIG)
```

## Run prcomp for FR07961003
```{r}
#| warning: false

# https://plotly.com/ggplot2/pca-visualization/
# Perform a principal component analysis, include centering and scaling of data.
# Using the prcomp command.
FR07961003.prcomp.data <- prcomp(FR07961003.nomissing[,1:5],
                                 center=TRUE,
                                 scale.=TRUE)
```

## Create a scatterplot for FR07961003
```{r}
#| warning: false

# Prepare data from prcomp for ggplot scatterplot.
FR07961003.pca.scatterplot.data <- cbind(FR07961003.prcomp.data$x[,1:2],
                                         as.character(FR07961003.nomissing[,6])) |>
    as_tibble() |>
    dplyr::rename(PC1="PC1",
                  PC2="PC2",
                  CONDITION="V3") |>
    dplyr::mutate_at(c("PC1"),
                     as.numeric) |>
    dplyr::mutate_at(c("PC2"),
                     as.numeric) |>
    dplyr::arrange(CONDITION)

# Extract the variance explained by the first two components.
FR07961003.pca.variance <- summary(FR07961003.prcomp.data)$importance[2,]

# Create the scatterplot.
FR07961003.pca.scatterplot <- ggplot(data=FR07961003.pca.scatterplot.data,
                                     aes(x=PC1,
                                         y=PC2,
                                         colour=CONDITION)) +
    geom_point(size=2) +
    theme(legend.position=c(0.95,0.75),
          legend.justification=c(1,0)) +
    scale_colour_manual(values=c("#83b96d",
                                 "#00a6cf"),
                        name="Clinical significance") +
    ggtitle("Projection of data on principal components one and two") +
    xlab(paste(paste("PC1 -",
                     format(round(FR07961003.pca.variance["PC1"] * 100),
                            2,
                            nsmall=2),
                     sep=" "),
               "%",
               sep="")) +
    ylab(paste(paste("PC2 -",
                     format(round(FR07961003.pca.variance["PC2"] * 100),
                            2,
                            nsmall=2),
                     sep=" "),
               "%",
               sep=""))

# Print the scatterplot.
FR07961003.pca.scatterplot
```

## Create a barplot for FR07961003
```{r}
#| warning: false

# Prepare data from prcomp for ggplot barplot.
FR07961003.pca.barplot.data <- cbind(FR07961003.pc1.contribs$data[,c(1,2)],
                                     FR07961003.pc2.contribs$data[,2]) |>
    as_tibble() |>
    dplyr::rename(PC1="contrib",
                  PC2="FR07961003.pc2.contribs$data[, 2]",
                  METHOD="name") |>
    dplyr::mutate_at(c("PC1"), as.numeric) |>
    dplyr::mutate_at(c("PC2"), as.numeric) |>
    pivot_longer(names_to="PCA",
                 values_to="CONTRIBUTION",
                 cols=c("PC1", "PC2")) |>
    dplyr::mutate(across(c("CONTRIBUTION"),
                         round,
                         2))

# Create the barplot.
FR07961003.pca.barplot <- ggplot(data=FR07961003.pca.barplot.data,
                                 aes(x=METHOD,
                                     y=CONTRIBUTION,
                                     fill=PCA,
                                     colour=PCA)) +
    ylim(c(0,70)) +
    geom_bar(stat="identity",
             position=position_dodge()) +
    geom_text(aes(label=CONTRIBUTION),
              fontface="bold",
              vjust=-1,
              position=position_dodge(0.9),
              size=4,
              colour="black") +
    theme(legend.position=c(0.95,0.75),
          legend.justification=c(1,0)) +
    scale_colour_manual(values=c("#003670",
                                 "#ec9e62"),
                        name="Principal component") +
    scale_fill_manual(values=c("#003670",
                               "#ec9e62"),
                      name="Principal component") +
    ggtitle("Contribution of the different annotation sources to principal\
            components one and two") +
    xlab("Annotation source") +
    ylab("Contribution (%)")

# Print the barplot.
FR07961003.pca.barplot
```

## Create a ROC plot for FR07961003
```{r}
#| warning: false

# https://cran.r-project.org/web/packages/plotROC/vignettes/examples.html
# Use ggplot and plotROC to create ROC plots for each annotation source.
FR07961003.combined.roc.plots <- ggplot(melt_roc(FR07961003.nomissing,
                                                 "ClinVar_CLNSIG",
                                                 c("CADD_PHRED",
                                                   "CADD_RAW",
                                                   "CAPICE_SCORE",
                                                   "FATHMM_MKL_C",
                                                   "FATHMM_MKL_NC")),
                                        aes(m=M,
                                            d=D,
                                            colour=name)) +
    geom_roc(n.cuts=5,
             labelsize=5,
             labelround=2,
             show.legend=TRUE,
             labels=FALSE) +
    xlim(-0.1, 1) +
    ylim(0, 1.1)

# Split the plots into 5 windows.
FR07961003.combined.roc.plots +
    facet_wrap(~ name)

# Calculate the AUC of each ROC plot.
calc_auc(FR07961003.combined.roc.plots) |>
    knitr::kable(format="html") |>
    kableExtra::kable_classic(full_width=FALSE)
```

## Create scatterplot using the annotation scores for FR07961003
```{r}
# Create a scatterplot of purely the scores we got from CAPICE and FATHMM
# coding.
FR07961003.scores.scatterplot <- ggplot(data=FR07961003.nomissing,
                                        aes(x=CAPICE_SCORE,
                                            y=FATHMM_MKL_C,
                                            colour=ClinVar_CLNSIG)) +
    geom_point(size=2)

# Print the scatterplot.
FR07961003.scores.scatterplot
```

## Create TSNE plot for FR07961003
```{r}
# https://plotly.com/ggplot2/pca-visualization/
# Create a TSNE object using the annotation columns, make sure to ignore
# duplicates, this has something to do with identical values generated by the
# PCA which is done under the hood.
FR07961003.tsne <- Rtsne(as.matrix(FR07961003.nomissing[,1:5]),
                         check_duplicates=FALSE)

# Extract the coordinates created by TSNE and add a column for colouring.
FR07961003.tsne.plot <- data.frame(x=FR07961003.tsne$Y[,1],
                                   y=FR07961003.tsne$Y[,2],
                                   colour=FR07961003.nomissing$ClinVar_CLNSIG)
```

```{r}
# Use ggplot to display the TSNE results.
ggplot(data=FR07961003.tsne.plot,
       aes(x=x,
           y=y,
           colour=colour)) +
    geom_point(size=2)
```

# Create random subsets and assign random conditions
```{r}
# Create three subsets with a size of 10000 variants.
FR07961003.set.1 <- FR07961003.nomissing |>
    sample_n(10000) |>
    dplyr::select(-ClinVar_CLNSIG)
FR07961003.set.2 <- FR07961003.nomissing |>
    sample_n(10000) |>
    dplyr::select(-ClinVar_CLNSIG)
FR07961003.set.3 <- FR07961003.nomissing |>
    sample_n(10000) |>
    dplyr::select(-ClinVar_CLNSIG)

# Create a vector with the possible conditions for variants.
CONDITION <- c("Benign", "Pathogenic")

# Assign the conditions set in the vector above randomly to all variants,
# making sure we get 5000 of each.
FR07961003.set.1$CONDITION[sample(1:nrow(FR07961003.set.1),
                                  nrow(FR07961003.set.1),
                                  FALSE)] <- rep(CONDITION,
                                                 c(5000,
                                                   5000))
FR07961003.set.2$CONDITION[sample(1:nrow(FR07961003.set.2),
                                  nrow(FR07961003.set.2),
                                  FALSE)] <- rep(CONDITION,
                                                 c(5000,
                                                   5000))
FR07961003.set.3$CONDITION[sample(1:nrow(FR07961003.set.3),
                                  nrow(FR07961003.set.3),
                                  FALSE)] <- rep(CONDITION,
                                                 c(5000,
                                                   5000))
```

## Create a ROC plot based on random datasets for set 1
```{r}
#| warning: false

# https://cran.r-project.org/web/packages/plotROC/vignettes/examples.html
# Use ggplot and plotROC to create ROC plots for each annotation source.
FR07961003.set.1.combined.roc.plots <- ggplot(melt_roc(FR07961003.set.1,
                                                       "CONDITION",
                                                       c("CADD_PHRED",
                                                         "CADD_RAW",
                                                         "CAPICE_SCORE",
                                                         "FATHMM_MKL_C",
                                                         "FATHMM_MKL_NC")),
                                              aes(m=M,
                                                  d=D,
                                                  colour=name)) +
    geom_roc(n.cuts=5,
             labelsize=5,
             labelround=2,
             show.legend=TRUE,
             labels=FALSE) +
    xlim(-0.1, 1) +
    ylim(0, 1.1)

FR07961003.set.1.combined.roc.plots +
    facet_wrap(~ name)

# Calculate the AUC of each ROC plot.
calc_auc(FR07961003.set.1.combined.roc.plots) |>
    knitr::kable(format="html") |>
    kableExtra::kable_classic(full_width=FALSE)
```

## Run prcomp for random set 1
```{r}
#| warning: false

# https://plotly.com/ggplot2/pca-visualization/
# Perform a principal component analysis, include centering and scaling of data.
# Using the prcomp command.
FR07961003.set.1.prcomp.data <- prcomp(FR07961003.set.1[,1:5],
                                       center=TRUE,
                                       scale.=TRUE)
```

## Create a scatterplot for random set 1
```{r}
#| warning: false

# Prepare data from prcomp for ggplot scatterplot.
FR07961003.set.1.pca.scatterplot.data <- cbind(FR07961003.set.1.prcomp.data$x[,1:2],
                                               as.character(FR07961003.set.1[,6])) |>
    as_tibble() |>
    dplyr::rename(PC1="PC1",
                  PC2="PC2",
                  CONDITION="V3") |>
    dplyr::mutate_at(c("PC1"),
                     as.numeric) |>
    dplyr::mutate_at(c("PC2"),
                     as.numeric) |>
    dplyr::arrange(CONDITION)

# Extract the variance explained by the first two components.
FR07961003.set.1.pca.variance <- summary(FR07961003.set.1.prcomp.data)$importance[2,]

# Create the scatterplot.
FR07961003.set.1.pca.scatterplot <- ggplot(data=FR07961003.set.1.pca.scatterplot.data,
                                           aes(x=PC1,
                                               y=PC2,
                                               colour=CONDITION)) +
    geom_point(size=2) +
    xlim(-4.0, 3.0) +
    ylim(-1.0, 2.0) +
    theme(legend.position=c(0.95,0.75),
          legend.justification=c(1,0)) +
    scale_colour_manual(values=c("#83b96d",
                                 "#00a6cf"),
                        name="Clinical significance") +
    ggtitle("Projection of data on principal components one and two") +
    xlab(paste(paste("PC1 -",
                     format(round(FR07961003.set.1.pca.variance["PC1"] * 100),
                            2,
                            nsmall=2),
                     sep=" "),
               "%",
               sep="")) +
    ylab(paste(paste("PC2 -",
                     format(round(FR07961003.set.1.pca.variance["PC2"] * 100),
                            2,
                            nsmall=2),
                     sep=" "),
               "%",
               sep=""))

# Print the scatterplot.
FR07961003.set.1.pca.scatterplot
```

## Create a ROC plot based on random datasets for set 2
```{r}
#| warning: false

# https://cran.r-project.org/web/packages/plotROC/vignettes/examples.html
# Use ggplot and plotROC to create ROC plots for each annotation source.
FR07961003.set.2.combined.roc.plots <- ggplot(melt_roc(FR07961003.set.2,
                                                       "CONDITION",
                                                       c("CADD_PHRED",
                                                         "CADD_RAW",
                                                         "CAPICE_SCORE",
                                                         "FATHMM_MKL_C",
                                                         "FATHMM_MKL_NC")),
                                              aes(m=M,
                                                  d=D,
                                                  colour=name)) +
    geom_roc(n.cuts=5,
             labelsize=5,
             labelround=2,
             show.legend=TRUE,
             labels=FALSE) +
    xlim(-0.1, 1) +
    ylim(0, 1.1)

FR07961003.set.2.combined.roc.plots +
    facet_wrap(~ name)

# Calculate the AUC of each ROC plot.
calc_auc(FR07961003.set.2.combined.roc.plots) |>
    knitr::kable(format="html") |>
    kableExtra::kable_classic(full_width=FALSE)
```

## Create a ROC plot based on random datasets for set 3
```{r}
#| warning: false

# https://cran.r-project.org/web/packages/plotROC/vignettes/examples.html
# Use ggplot and plotROC to create ROC plots for each annotation source.
FR07961003.set.3.combined.roc.plots <- ggplot(melt_roc(FR07961003.set.3,
                                                       "CONDITION",
                                                       c("CADD_PHRED",
                                                         "CADD_RAW",
                                                         "CAPICE_SCORE",
                                                         "FATHMM_MKL_C",
                                                         "FATHMM_MKL_NC")),
                                              aes(m=M,
                                                  d=D,
                                                  colour=name)) +
    geom_roc(n.cuts=5,
             labelsize=5,
             labelround=2,
             show.legend=TRUE,
             labels=FALSE) +
    xlim(-0.1, 1) +
    ylim(0, 1.1)

FR07961003.set.3.combined.roc.plots +
    facet_wrap(~ name)

# Calculate the AUC of each ROC plot.
calc_auc(FR07961003.set.3.combined.roc.plots) |>
    knitr::kable(format="html") |>
    kableExtra::kable_classic(full_width=FALSE)
```

# Output session information
```{r}
#| warning: false

# Print the session info including packages and version used.
sessionInfo()
```